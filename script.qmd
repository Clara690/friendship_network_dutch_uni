---
title: "freshmen social network"
author: "Yun-Tsz Tsai"
format: pdf
editor: visual
excute: 
  echo: false
---

```{r}
#| echo: false
#| warning: false
# load the necessary libraries
library(igraph)
library(dplyr)
library(sna)
# for plotting network that contains negative ties
library(qgraph)
```

# Data handling

The original

```{r}
# data collected at the beginning of the study

# load the adjacency matr1ix 
df1 <- read.csv('./data/t1.dat', header = FALSE, sep = '')
df4 <- read.csv('./data/t4.dat', header = FALSE, sep = '')

# handling missing values
df1[df1 == 6| df1 == 9] <- NA
df4[df4 == 6| df4 == 9] <- 0

# attributes 
atr1 <- read.csv('./data/cov1.dat', header = FALSE, sep = '') 
atr4 <- read.csv('./data/cov4.dat', header = FALSE, sep = '')
atr1$node_id <- colnames(df1)
atr4$node_id <- colnames(df4)
```

```{r}
# turn original data frame into a matr1ix
mtx_t1 <- as.matrix(df1)
mtx_t4 <- as.matrix(df4)
# positive ties 
mtx_t1[mtx_t1 %in% 1:3] <- 2
mtx_t4[mtx_t4 %in% 1:3] <- 1
 # neutral ties
mtx_t1[mtx_t1 == 4] <- 1
mtx_t4[mtx_t4 == 4] <- 0
 # negative ties 
mtx_t1[mtx_t1 == 5] <- -2
mtx_t4[mtx_t4 == 5] <- 0

# turn matr1ix into a graph
diag(mtx_t1) <- 0 # set the values in diagonal dir to 0 
diag(mtx_t4) <- 0


```

## Initial Exploration of the Network

```{r}
#| warning: false
uni_t1 <- graph_from_adjacency_matrix(mtx_t1) 
print(class(uni_t1)) # igraph object

# fix the node position 
set.seed(316)
pos = layout_with_kk(uni_t1)
# visualization of period 1
t1_graph <- qgraph(mtx_t1, vsize = 5, minimum = 1, layout = pos, lengend = TRUE, title = 'Friendship Network at Period 1')
# visualization of period 4
t4_graph <- qgraph(mtx_t4, vsize = 5, minimum = 1, layout = pos,
       title = 'Friendship Network at Period 4')

```

```{r}
#| echo: false
# the number of ties
length(as_edgelist(nl_uni_t1))
length(as_edgelist(nl_uni_t4))
# the number of nodes 
length(V(nl_uni_t1))
length(V(nl_uni_t4))
# the number of nodes that are isolated
cat('The number of individuals that are not connected to any other individuals is', length(isolates(mtx_t1)), '\n')
cat('The number of individuals that are not connected to any other individuals is', length(isolates(mtx_t4)))
```

```{r}
# check for duplicates
length(unique(atr1$V1)) == nrow(df1)
length(unique(atr1$V1)) == nrow(df4)

```

```{r}
# period 1 
grph1 <- graph_from_adjacency_matrix(mtx_t1, weighted = TRUE, 
                                     mode = 'directed')
# fixed position
set.seed(7)
pos = layout_with_fr(grph1)
# length(E(grph1))
# length(as_edgelist(grph1))
plot.igraph(grph1, vertex.label = V(grph1)$name,vertex.size= 4,
            edge.color='darkgrey',edge.arrow.size=.2,
            layout= pos, 
            main='Friendship Network at Time 1')
# period 4 
grph4 <- graph_from_adjacency_matrix(mtx_t4, weighted = TRUE,
                                     mode = 'directed')
plot.igraph(grph4, vertex.label = V(grph4)$name,vertex.size= 4,
            edge.color='darkgrey',edge.arrow.size=.2,
            layout= pos, 
            main='Friendship Network at Time 4')
```

# Visualization of node attributes

```{r}
E(grph4)
V(grph4)$name[1:10]
```

```{r}
atr4$node_id[1:10]
```

```{r}
# adding attribute to the exsiting network
 # V2 = gender
atr1[match(V(nl_uni_t1)$name, atr1$node_id), ]$V2
```

```{r}
# time 1
V(grph1)$gender <- atr1[match(V(grph1)$name, atr1$node_id), ]$V2
plot.igraph(grph1,
            vertex.label= V(grph1)$name, vertex.size= 4,
            vertex.color= ifelse(V(grph1)$gender == 1,'royalblue','pink'), 
            #1 = male, 2 = female
            edge.color='darkgrey',edge.arrow.size=.2,
            layout= pos,
            main='Friendship Network at Time 1 \nblue: male, pink: female')
# time 4
V(grph4)$gender <- atr4[match(V(grph4)$name, atr4$node_id), ]$V2
plot.igraph(grph4,vertex.label= V(grph4)$name, vertex.size= 4,
            vertex.color= ifelse(V(grph4)$gender == 1,'royalblue','pink'), 
            #1 = male, 2 = female
            edge.color='darkgrey',edge.arrow.size=.2,
            layout= pos,
            main='Friendship Network at Time 1 \nblue: male, pink: female'
            )
```

```{r}
```

```{r}
# if the network is directed
print(is_directed(nl_uni_t1))
# average degress of the network 
avg_in_degree <- mean(igraph::degree(nl_uni_t1, mode = 'in'))
print(avg_in_degree)
```
